{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 필요한 라이브러리 임포트\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# 1. 데이터 불러오기\n# 예: 집값 데이터셋 파일을 CSV로 불러오기\n# data = pd.read_csv('house_prices.csv')\n\n# 예제 데이터 생성\ndata = pd.DataFrame({\n    'size': [750, 800, 850, 900, 950, 1000, 1100, 1200, 1300, 1400],\n    'bedrooms': [2, 2, 3, 3, 3, 3, 4, 4, 4, 5],\n    'age': [10, 15, 10, 20, 25, 30, 5, 10, 20, 30],\n    'price': [150000, 160000, 170000, 180000, 190000, 200000, 220000, 240000, 260000, 280000]\n})\n\n# 2. 특성과 타깃 변수 분리\nX = data[['size', 'bedrooms', 'age']]\ny = data['price']\n\n# 3. 학습/테스트 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# 4. 모델 선택 및 학습 (선형 회귀)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# 5. 예측\ny_pred = model.predict(X_test)\n\n# 6. 모델 성능 평가\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\n\nprint(\"예측된 집값:\", y_pred)\nprint(\"RMSE (Root Mean Squared Error):\", rmse)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T00:25:37.714163Z","iopub.execute_input":"2024-11-06T00:25:37.714580Z","iopub.status.idle":"2024-11-06T00:25:40.773468Z","shell.execute_reply.started":"2024-11-06T00:25:37.714537Z","shell.execute_reply":"2024-11-06T00:25:40.771950Z"}},"outputs":[{"name":"stdout","text":"예측된 집값: [260000. 160000.]\nRMSE (Root Mean Squared Error): 2.9103830456733704e-11\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"# 필요한 라이브러리 임포트\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# 1. 데이터 불러오기 및 예제 데이터 생성\ndata = pd.read_csv('/kaggle/input/home-data/() _.csv', encoding='cp949')\n\n# 2. 특성과 타깃 변수 분리\nX = data[['size', 'bedrooms', 'age']]\ny = data['price']\n\n# 3. 학습/테스트 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# 4. 모델 선택 및 학습 (선형 회귀)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# 5. 사용자 입력으로 예측하기\n# 사용자에게 입력을 요청\ninput_size = float(input(\"집의 크기(평방 피트): \"))\ninput_bedrooms = int(input(\"방의 개수: \"))\ninput_age = int(input(\"집의 나이(연수): \"))\n\n# 입력값으로 예측\nuser_input = np.array([[input_size, input_bedrooms, input_age]])\npredicted_price = model.predict(user_input)\n\nprint(f\"예측된 집값: ${predicted_price[0]:,.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T00:31:52.546833Z","iopub.execute_input":"2024-11-06T00:31:52.547340Z","iopub.status.idle":"2024-11-06T00:31:53.767923Z","shell.execute_reply.started":"2024-11-06T00:31:52.547295Z","shell.execute_reply":"2024-11-06T00:31:53.766110Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[9], line 12\u001b[0m\n\u001b[1;32m      9\u001b[0m data \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/input/home-data/() _.csv\u001b[39m\u001b[38;5;124m'\u001b[39m, encoding\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcp949\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m# 2. 특성과 타깃 변수 분리\u001b[39;00m\n\u001b[0;32m---> 12\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[43mdata\u001b[49m\u001b[43m[\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43msize\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mbedrooms\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mage\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m     13\u001b[0m y \u001b[38;5;241m=\u001b[39m data[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mprice\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m     15\u001b[0m \u001b[38;5;66;03m# 3. 학습/테스트 데이터 분리\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:4108\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_iterator(key):\n\u001b[1;32m   4107\u001b[0m         key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n\u001b[0;32m-> 4108\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_indexer_strict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcolumns\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m   4110\u001b[0m \u001b[38;5;66;03m# take() does not accept boolean indexers\u001b[39;00m\n\u001b[1;32m   4111\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(indexer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mbool\u001b[39m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6200\u001b[0m, in \u001b[0;36mIndex._get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6197\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   6198\u001b[0m     keyarr, indexer, new_indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reindex_non_unique(keyarr)\n\u001b[0;32m-> 6200\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_raise_if_missing\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkeyarr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis_name\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6202\u001b[0m keyarr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtake(indexer)\n\u001b[1;32m   6203\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, Index):\n\u001b[1;32m   6204\u001b[0m     \u001b[38;5;66;03m# GH 42790 - Preserve name from an Index\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6249\u001b[0m, in \u001b[0;36mIndex._raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6247\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m nmissing:\n\u001b[1;32m   6248\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m nmissing \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mlen\u001b[39m(indexer):\n\u001b[0;32m-> 6249\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone of [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkey\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m] are in the [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00maxis_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6251\u001b[0m     not_found \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(ensure_index(key)[missing_mask\u001b[38;5;241m.\u001b[39mnonzero()[\u001b[38;5;241m0\u001b[39m]]\u001b[38;5;241m.\u001b[39munique())\n\u001b[1;32m   6252\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnot_found\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['size', 'bedrooms', 'age'], dtype='object')] are in the [columns]\""],"ename":"KeyError","evalue":"\"None of [Index(['size', 'bedrooms', 'age'], dtype='object')] are in the [columns]\"","output_type":"error"}],"execution_count":9},{"cell_type":"code","source":"import pandas as pd\ndata = pd.read_csv('/kaggle/input/seoul-department-data/.csv', encoding='cp949', low_memory=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T01:42:08.961531Z","iopub.execute_input":"2024-11-06T01:42:08.961913Z","iopub.status.idle":"2024-11-06T01:42:13.443049Z","shell.execute_reply.started":"2024-11-06T01:42:08.961871Z","shell.execute_reply":"2024-11-06T01:42:13.441467Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T01:42:15.410031Z","iopub.execute_input":"2024-11-06T01:42:15.410388Z","iopub.status.idle":"2024-11-06T01:42:15.967278Z","shell.execute_reply.started":"2024-11-06T01:42:15.410354Z","shell.execute_reply":"2024-11-06T01:42:15.966086Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"         접수연도  자치구코드  자치구명  법정동코드   법정동명  지번구분 지번구분명    본번    부번  \\\n0        2023  11380   은평구  10200    녹번동   1.0    대지  0152  0059   \n1        2023  11590   동작구  10700    사당동   NaN   NaN   NaN   NaN   \n2        2023  11590   동작구  10700    사당동   NaN   NaN   NaN   NaN   \n3        2023  11710   송파구  10400    송파동   1.0    대지  0095  0007   \n4        2023  11530   구로구  10200    구로동   1.0    대지  0546  0017   \n...       ...    ...   ...    ...    ...   ...   ...   ...   ...   \n1026027  2018  11200   성동구  10700    행당동   1.0    대지  0375  0000   \n1026028  2018  11200   성동구  10700    행당동   1.0    대지  0375  0000   \n1026029  2018  11200   성동구  10200  하왕십리동   1.0    대지  0258  0000   \n1026030  2018  11380   은평구  10800    역촌동   1.0    대지  0003  0029   \n1026031  2018  11560  영등포구  11000   여의도동   1.0    대지  0054  0000   \n\n                    건물명  ...  물건금액(만원)  건물면적(㎡)  토지면적(㎡)     층  권리구분 취소일  \\\n0        이지플아트빌(152-59)  ...     33500    43.04    37.00   2.0   NaN NaN   \n1                   NaN  ...     90000   146.14    98.60   NaN   NaN NaN   \n2                   NaN  ...    190000   148.23   202.70   NaN   NaN NaN   \n3          HANYANGLEEPS  ...     11000    13.38    10.61   5.0   NaN NaN   \n4             오크트리빌구로1차  ...     27250    29.18    20.13   5.0   NaN NaN   \n...                 ...  ...       ...      ...      ...   ...   ...  ..   \n1026027            두산위브  ...     46500    59.99     0.00   4.0   NaN NaN   \n1026028            두산위브  ...     46500    59.99     0.00   3.0   NaN NaN   \n1026029            청계벽산  ...     48000   114.46      NaN  18.0   NaN NaN   \n1026030           청록아트빌  ...     18000    54.47    25.27   1.0   NaN NaN   \n1026031              진주  ...     71000    94.31     0.00   7.0   NaN NaN   \n\n           건축년도   건물용도  신고구분 신고한 개업공인중개사 시군구명  \n0        2005.0  연립다세대  중개거래           서울 은평구  \n1        1987.0  단독다가구  중개거래           서울 강남구  \n2        1970.0  단독다가구  중개거래           서울 강남구  \n3        2012.0  연립다세대  중개거래           서울 송파구  \n4        2023.0  연립다세대   직거래              NaN  \n...         ...    ...   ...              ...  \n1026027  2009.0    아파트   NaN              NaN  \n1026028  2009.0    아파트   NaN              NaN  \n1026029  1996.0    아파트   NaN              NaN  \n1026030  2001.0  연립다세대   NaN              NaN  \n1026031  1977.0    아파트   NaN              NaN  \n\n[1026032 rows x 21 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>접수연도</th>\n      <th>자치구코드</th>\n      <th>자치구명</th>\n      <th>법정동코드</th>\n      <th>법정동명</th>\n      <th>지번구분</th>\n      <th>지번구분명</th>\n      <th>본번</th>\n      <th>부번</th>\n      <th>건물명</th>\n      <th>...</th>\n      <th>물건금액(만원)</th>\n      <th>건물면적(㎡)</th>\n      <th>토지면적(㎡)</th>\n      <th>층</th>\n      <th>권리구분</th>\n      <th>취소일</th>\n      <th>건축년도</th>\n      <th>건물용도</th>\n      <th>신고구분</th>\n      <th>신고한 개업공인중개사 시군구명</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023</td>\n      <td>11380</td>\n      <td>은평구</td>\n      <td>10200</td>\n      <td>녹번동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0152</td>\n      <td>0059</td>\n      <td>이지플아트빌(152-59)</td>\n      <td>...</td>\n      <td>33500</td>\n      <td>43.04</td>\n      <td>37.00</td>\n      <td>2.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2005.0</td>\n      <td>연립다세대</td>\n      <td>중개거래</td>\n      <td>서울 은평구</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023</td>\n      <td>11590</td>\n      <td>동작구</td>\n      <td>10700</td>\n      <td>사당동</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>90000</td>\n      <td>146.14</td>\n      <td>98.60</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1987.0</td>\n      <td>단독다가구</td>\n      <td>중개거래</td>\n      <td>서울 강남구</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023</td>\n      <td>11590</td>\n      <td>동작구</td>\n      <td>10700</td>\n      <td>사당동</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>190000</td>\n      <td>148.23</td>\n      <td>202.70</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1970.0</td>\n      <td>단독다가구</td>\n      <td>중개거래</td>\n      <td>서울 강남구</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023</td>\n      <td>11710</td>\n      <td>송파구</td>\n      <td>10400</td>\n      <td>송파동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0095</td>\n      <td>0007</td>\n      <td>HANYANGLEEPS</td>\n      <td>...</td>\n      <td>11000</td>\n      <td>13.38</td>\n      <td>10.61</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2012.0</td>\n      <td>연립다세대</td>\n      <td>중개거래</td>\n      <td>서울 송파구</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023</td>\n      <td>11530</td>\n      <td>구로구</td>\n      <td>10200</td>\n      <td>구로동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0546</td>\n      <td>0017</td>\n      <td>오크트리빌구로1차</td>\n      <td>...</td>\n      <td>27250</td>\n      <td>29.18</td>\n      <td>20.13</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2023.0</td>\n      <td>연립다세대</td>\n      <td>직거래</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1026027</th>\n      <td>2018</td>\n      <td>11200</td>\n      <td>성동구</td>\n      <td>10700</td>\n      <td>행당동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0375</td>\n      <td>0000</td>\n      <td>두산위브</td>\n      <td>...</td>\n      <td>46500</td>\n      <td>59.99</td>\n      <td>0.00</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2009.0</td>\n      <td>아파트</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1026028</th>\n      <td>2018</td>\n      <td>11200</td>\n      <td>성동구</td>\n      <td>10700</td>\n      <td>행당동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0375</td>\n      <td>0000</td>\n      <td>두산위브</td>\n      <td>...</td>\n      <td>46500</td>\n      <td>59.99</td>\n      <td>0.00</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2009.0</td>\n      <td>아파트</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1026029</th>\n      <td>2018</td>\n      <td>11200</td>\n      <td>성동구</td>\n      <td>10200</td>\n      <td>하왕십리동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0258</td>\n      <td>0000</td>\n      <td>청계벽산</td>\n      <td>...</td>\n      <td>48000</td>\n      <td>114.46</td>\n      <td>NaN</td>\n      <td>18.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1996.0</td>\n      <td>아파트</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1026030</th>\n      <td>2018</td>\n      <td>11380</td>\n      <td>은평구</td>\n      <td>10800</td>\n      <td>역촌동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0003</td>\n      <td>0029</td>\n      <td>청록아트빌</td>\n      <td>...</td>\n      <td>18000</td>\n      <td>54.47</td>\n      <td>25.27</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2001.0</td>\n      <td>연립다세대</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1026031</th>\n      <td>2018</td>\n      <td>11560</td>\n      <td>영등포구</td>\n      <td>11000</td>\n      <td>여의도동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0054</td>\n      <td>0000</td>\n      <td>진주</td>\n      <td>...</td>\n      <td>71000</td>\n      <td>94.31</td>\n      <td>0.00</td>\n      <td>7.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1977.0</td>\n      <td>아파트</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>1026032 rows × 21 columns</p>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"import pandas as pd\n\n# 데이터 불러오기 (예시 경로와 인코딩 사용)\ndata = pd.read_csv('/kaggle/input/seoul-department-data/.csv', encoding='cp949', low_memory=False)\n\n# 연도 열이 \"Year\"로 가정\n# 문자열로 되어 있는 경우, 숫자형으로 변환\ndata['Year'] = pd.to_numeric(data['접수연도'], errors='coerce')\n\n# 연도별로 정렬하기\ndata_sorted = data.sort_values(by='Year')\n\n# 정렬된 데이터 출력 (상위 5개)\nprint(data_sorted.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T01:43:37.366397Z","iopub.execute_input":"2024-11-06T01:43:37.366778Z","iopub.status.idle":"2024-11-06T01:43:42.418008Z","shell.execute_reply.started":"2024-11-06T01:43:37.366743Z","shell.execute_reply":"2024-11-06T01:43:42.416799Z"}},"outputs":[{"name":"stdout","text":"        접수연도  자치구코드  자치구명  법정동코드 법정동명  지번구분 지번구분명    본번    부번      건물명  ...  \\\n769523  2017  11410  서대문구  11800  홍은동   1.0    대지  0454  0000       극동  ...   \n796888  2017  11740   강동구  10200  고덕동   1.0    대지  0693  0000  고덕 그라시움  ...   \n796889  2017  11710   송파구  10800  문정동   1.0    대지  0118  0017      하늘빌  ...   \n796890  2017  11740   강동구  10200  고덕동   1.0    대지  0693  0000  고덕 그라시움  ...   \n796891  2017  11380   은평구  10200  녹번동   1.0    대지  0096  0005    하늘드리움  ...   \n\n        건물면적(㎡)  토지면적(㎡)     층  권리구분  취소일    건축년도   건물용도  신고구분  \\\n769523    84.98     0.00   7.0   NaN  NaN  1995.0    아파트   NaN   \n796888    84.24     0.00   9.0   분양권  NaN     0.0    아파트   NaN   \n796889    45.70    22.42   4.0   NaN  NaN  2004.0  연립다세대   NaN   \n796890    84.24     0.00  10.0   분양권  NaN     0.0    아파트   NaN   \n796891    51.21    21.37   4.0   NaN  NaN  2011.0  연립다세대   NaN   \n\n       신고한 개업공인중개사 시군구명    Year  \n769523              NaN  2017.0  \n796888              NaN  2017.0  \n796889              NaN  2017.0  \n796890              NaN  2017.0  \n796891              NaN  2017.0  \n\n[5 rows x 22 columns]\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T01:43:52.951491Z","iopub.execute_input":"2024-11-06T01:43:52.951912Z","iopub.status.idle":"2024-11-06T01:43:53.643665Z","shell.execute_reply.started":"2024-11-06T01:43:52.951874Z","shell.execute_reply":"2024-11-06T01:43:53.642199Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"         접수연도  자치구코드  자치구명  법정동코드   법정동명  지번구분 지번구분명    본번    부번  \\\n0        2023  11380   은평구  10200    녹번동   1.0    대지  0152  0059   \n1        2023  11590   동작구  10700    사당동   NaN   NaN   NaN   NaN   \n2        2023  11590   동작구  10700    사당동   NaN   NaN   NaN   NaN   \n3        2023  11710   송파구  10400    송파동   1.0    대지  0095  0007   \n4        2023  11530   구로구  10200    구로동   1.0    대지  0546  0017   \n...       ...    ...   ...    ...    ...   ...   ...   ...   ...   \n1026027  2018  11200   성동구  10700    행당동   1.0    대지  0375  0000   \n1026028  2018  11200   성동구  10700    행당동   1.0    대지  0375  0000   \n1026029  2018  11200   성동구  10200  하왕십리동   1.0    대지  0258  0000   \n1026030  2018  11380   은평구  10800    역촌동   1.0    대지  0003  0029   \n1026031  2018  11560  영등포구  11000   여의도동   1.0    대지  0054  0000   \n\n                    건물명  ...  건물면적(㎡)  토지면적(㎡)     층  권리구분  취소일    건축년도  \\\n0        이지플아트빌(152-59)  ...    43.04    37.00   2.0   NaN  NaN  2005.0   \n1                   NaN  ...   146.14    98.60   NaN   NaN  NaN  1987.0   \n2                   NaN  ...   148.23   202.70   NaN   NaN  NaN  1970.0   \n3          HANYANGLEEPS  ...    13.38    10.61   5.0   NaN  NaN  2012.0   \n4             오크트리빌구로1차  ...    29.18    20.13   5.0   NaN  NaN  2023.0   \n...                 ...  ...      ...      ...   ...   ...  ...     ...   \n1026027            두산위브  ...    59.99     0.00   4.0   NaN  NaN  2009.0   \n1026028            두산위브  ...    59.99     0.00   3.0   NaN  NaN  2009.0   \n1026029            청계벽산  ...   114.46      NaN  18.0   NaN  NaN  1996.0   \n1026030           청록아트빌  ...    54.47    25.27   1.0   NaN  NaN  2001.0   \n1026031              진주  ...    94.31     0.00   7.0   NaN  NaN  1977.0   \n\n          건물용도  신고구분 신고한 개업공인중개사 시군구명    Year  \n0        연립다세대  중개거래           서울 은평구  2023.0  \n1        단독다가구  중개거래           서울 강남구  2023.0  \n2        단독다가구  중개거래           서울 강남구  2023.0  \n3        연립다세대  중개거래           서울 송파구  2023.0  \n4        연립다세대   직거래              NaN  2023.0  \n...        ...   ...              ...     ...  \n1026027    아파트   NaN              NaN  2018.0  \n1026028    아파트   NaN              NaN  2018.0  \n1026029    아파트   NaN              NaN  2018.0  \n1026030  연립다세대   NaN              NaN  2018.0  \n1026031    아파트   NaN              NaN  2018.0  \n\n[1026032 rows x 22 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>접수연도</th>\n      <th>자치구코드</th>\n      <th>자치구명</th>\n      <th>법정동코드</th>\n      <th>법정동명</th>\n      <th>지번구분</th>\n      <th>지번구분명</th>\n      <th>본번</th>\n      <th>부번</th>\n      <th>건물명</th>\n      <th>...</th>\n      <th>건물면적(㎡)</th>\n      <th>토지면적(㎡)</th>\n      <th>층</th>\n      <th>권리구분</th>\n      <th>취소일</th>\n      <th>건축년도</th>\n      <th>건물용도</th>\n      <th>신고구분</th>\n      <th>신고한 개업공인중개사 시군구명</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023</td>\n      <td>11380</td>\n      <td>은평구</td>\n      <td>10200</td>\n      <td>녹번동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0152</td>\n      <td>0059</td>\n      <td>이지플아트빌(152-59)</td>\n      <td>...</td>\n      <td>43.04</td>\n      <td>37.00</td>\n      <td>2.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2005.0</td>\n      <td>연립다세대</td>\n      <td>중개거래</td>\n      <td>서울 은평구</td>\n      <td>2023.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023</td>\n      <td>11590</td>\n      <td>동작구</td>\n      <td>10700</td>\n      <td>사당동</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>146.14</td>\n      <td>98.60</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1987.0</td>\n      <td>단독다가구</td>\n      <td>중개거래</td>\n      <td>서울 강남구</td>\n      <td>2023.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023</td>\n      <td>11590</td>\n      <td>동작구</td>\n      <td>10700</td>\n      <td>사당동</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>148.23</td>\n      <td>202.70</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1970.0</td>\n      <td>단독다가구</td>\n      <td>중개거래</td>\n      <td>서울 강남구</td>\n      <td>2023.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023</td>\n      <td>11710</td>\n      <td>송파구</td>\n      <td>10400</td>\n      <td>송파동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0095</td>\n      <td>0007</td>\n      <td>HANYANGLEEPS</td>\n      <td>...</td>\n      <td>13.38</td>\n      <td>10.61</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2012.0</td>\n      <td>연립다세대</td>\n      <td>중개거래</td>\n      <td>서울 송파구</td>\n      <td>2023.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023</td>\n      <td>11530</td>\n      <td>구로구</td>\n      <td>10200</td>\n      <td>구로동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0546</td>\n      <td>0017</td>\n      <td>오크트리빌구로1차</td>\n      <td>...</td>\n      <td>29.18</td>\n      <td>20.13</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2023.0</td>\n      <td>연립다세대</td>\n      <td>직거래</td>\n      <td>NaN</td>\n      <td>2023.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1026027</th>\n      <td>2018</td>\n      <td>11200</td>\n      <td>성동구</td>\n      <td>10700</td>\n      <td>행당동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0375</td>\n      <td>0000</td>\n      <td>두산위브</td>\n      <td>...</td>\n      <td>59.99</td>\n      <td>0.00</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2009.0</td>\n      <td>아파트</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2018.0</td>\n    </tr>\n    <tr>\n      <th>1026028</th>\n      <td>2018</td>\n      <td>11200</td>\n      <td>성동구</td>\n      <td>10700</td>\n      <td>행당동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0375</td>\n      <td>0000</td>\n      <td>두산위브</td>\n      <td>...</td>\n      <td>59.99</td>\n      <td>0.00</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2009.0</td>\n      <td>아파트</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2018.0</td>\n    </tr>\n    <tr>\n      <th>1026029</th>\n      <td>2018</td>\n      <td>11200</td>\n      <td>성동구</td>\n      <td>10200</td>\n      <td>하왕십리동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0258</td>\n      <td>0000</td>\n      <td>청계벽산</td>\n      <td>...</td>\n      <td>114.46</td>\n      <td>NaN</td>\n      <td>18.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1996.0</td>\n      <td>아파트</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2018.0</td>\n    </tr>\n    <tr>\n      <th>1026030</th>\n      <td>2018</td>\n      <td>11380</td>\n      <td>은평구</td>\n      <td>10800</td>\n      <td>역촌동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0003</td>\n      <td>0029</td>\n      <td>청록아트빌</td>\n      <td>...</td>\n      <td>54.47</td>\n      <td>25.27</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2001.0</td>\n      <td>연립다세대</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2018.0</td>\n    </tr>\n    <tr>\n      <th>1026031</th>\n      <td>2018</td>\n      <td>11560</td>\n      <td>영등포구</td>\n      <td>11000</td>\n      <td>여의도동</td>\n      <td>1.0</td>\n      <td>대지</td>\n      <td>0054</td>\n      <td>0000</td>\n      <td>진주</td>\n      <td>...</td>\n      <td>94.31</td>\n      <td>0.00</td>\n      <td>7.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1977.0</td>\n      <td>아파트</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2018.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1026032 rows × 22 columns</p>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"# 필요한 라이브러리 임포트\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# 1. 데이터 불러오기 및 예제 데이터 생성\ndata = pd.read_csv('/kaggle/input/seoul-department-data/.csv', encoding='cp949')\n\n# 2. 특성과 타깃 변수 분리\n# 'building_area', 'land_area', 'year_built' 열이 존재한다고 가정\nX = data[['building_area', 'land_area', 'year_built']]\ny = data['price']\n\n# 3. 학습/테스트 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# 4. 모델 선택 및 학습 (선형 회귀)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# 5. 사용자 입력으로 예측하기\n# 사용자에게 입력을 요청\ninput_building_area = float(input(\"건물 면적(평방 피트): \"))\ninput_land_area = float(input(\"토지 면적(평방 피트): \"))\ninput_year_built = int(input(\"건축년도: \"))\n\n# 입력값으로 예측\nuser_input = np.array([[input_building_area, input_land_area, input_year_built]])\npredicted_price = model.predict(user_input)\n\nprint(f\"예측된 집값: ${predicted_price[0]:,.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T02:13:12.885852Z","iopub.execute_input":"2024-11-06T02:13:12.886258Z","iopub.status.idle":"2024-11-06T02:13:18.356270Z","shell.execute_reply.started":"2024-11-06T02:13:12.886221Z","shell.execute_reply":"2024-11-06T02:13:18.354203Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/1521278707.py:9: DtypeWarning: Columns (0,7,8,19,20) have mixed types. Specify dtype option on import or set low_memory=False.\n  data = pd.read_csv('/kaggle/input/seoul-department-data/.csv', encoding='cp949')\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[8], line 13\u001b[0m\n\u001b[1;32m      9\u001b[0m data \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/input/seoul-department-data/.csv\u001b[39m\u001b[38;5;124m'\u001b[39m, encoding\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcp949\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m# 2. 특성과 타깃 변수 분리\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;66;03m# 'building_area', 'land_area', 'year_built' 열이 존재한다고 가정\u001b[39;00m\n\u001b[0;32m---> 13\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[43mdata\u001b[49m\u001b[43m[\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mbuilding_area\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mland_area\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43myear_built\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m     14\u001b[0m y \u001b[38;5;241m=\u001b[39m data[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mprice\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m     16\u001b[0m \u001b[38;5;66;03m# 3. 학습/테스트 데이터 분리\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:4108\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_iterator(key):\n\u001b[1;32m   4107\u001b[0m         key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n\u001b[0;32m-> 4108\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_indexer_strict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcolumns\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m   4110\u001b[0m \u001b[38;5;66;03m# take() does not accept boolean indexers\u001b[39;00m\n\u001b[1;32m   4111\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(indexer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mbool\u001b[39m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6200\u001b[0m, in \u001b[0;36mIndex._get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6197\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   6198\u001b[0m     keyarr, indexer, new_indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reindex_non_unique(keyarr)\n\u001b[0;32m-> 6200\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_raise_if_missing\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkeyarr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis_name\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6202\u001b[0m keyarr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtake(indexer)\n\u001b[1;32m   6203\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, Index):\n\u001b[1;32m   6204\u001b[0m     \u001b[38;5;66;03m# GH 42790 - Preserve name from an Index\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6249\u001b[0m, in \u001b[0;36mIndex._raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6247\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m nmissing:\n\u001b[1;32m   6248\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m nmissing \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mlen\u001b[39m(indexer):\n\u001b[0;32m-> 6249\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone of [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkey\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m] are in the [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00maxis_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6251\u001b[0m     not_found \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(ensure_index(key)[missing_mask\u001b[38;5;241m.\u001b[39mnonzero()[\u001b[38;5;241m0\u001b[39m]]\u001b[38;5;241m.\u001b[39munique())\n\u001b[1;32m   6252\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnot_found\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['building_area', 'land_area', 'year_built'], dtype='object')] are in the [columns]\""],"ename":"KeyError","evalue":"\"None of [Index(['building_area', 'land_area', 'year_built'], dtype='object')] are in the [columns]\"","output_type":"error"}],"execution_count":8},{"cell_type":"code","source":"# 필요한 라이브러리 임포트\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# 1. 데이터 불러오기\ndata = pd.read_csv('/kaggle/input/seoul-department-data/.csv', encoding='cp949')\n\n# 2. 특성과 타깃 변수 분리\n# CSV 파일의 실제 열 이름 (\"건물 면적\", \"토지 면적\", \"건축년도\")을 반영\nX = data[['건물면적(㎡)', '토지 면적(㎡)', '건축년도']]\ny = data['price']  # 집값에 해당하는 열 이름이 'price'라고 가정\n\n# 3. 학습/테스트 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# 4. 모델 선택 및 학습 (선형 회귀)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# 5. 사용자 입력으로 예측하기\n# 사용자에게 입력을 요청\ninput_building_area = float(input(\"건물 면적(평방 피트): \"))\ninput_land_area = float(input(\"토지 면적(평방 피트): \"))\ninput_year_built = int(input(\"건축년도: \"))\n\n# 입력값으로 예측\nuser_input = np.array([[input_building_area, input_land_area, input_year_built]])\npredicted_price = model.predict(user_input)\n\nprint(f\"예측된 집값: ${predicted_price[0]:,.2f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T02:16:08.948093Z","iopub.execute_input":"2024-11-06T02:16:08.948505Z","iopub.status.idle":"2024-11-06T02:16:13.147408Z","shell.execute_reply.started":"2024-11-06T02:16:08.948471Z","shell.execute_reply":"2024-11-06T02:16:13.145316Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/4024628747.py:9: DtypeWarning: Columns (0,7,8,19,20) have mixed types. Specify dtype option on import or set low_memory=False.\n  data = pd.read_csv('/kaggle/input/seoul-department-data/.csv', encoding='cp949')\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[10], line 13\u001b[0m\n\u001b[1;32m      9\u001b[0m data \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/input/seoul-department-data/.csv\u001b[39m\u001b[38;5;124m'\u001b[39m, encoding\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcp949\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m# 2. 특성과 타깃 변수 분리\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;66;03m# CSV 파일의 실제 열 이름 (\"건물 면적\", \"토지 면적\", \"건축년도\")을 반영\u001b[39;00m\n\u001b[0;32m---> 13\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[43mdata\u001b[49m\u001b[43m[\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m건물면적(㎡)\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m토지 면적(㎡)\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m건축년도\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m     14\u001b[0m y \u001b[38;5;241m=\u001b[39m data[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mprice\u001b[39m\u001b[38;5;124m'\u001b[39m]  \u001b[38;5;66;03m# 집값에 해당하는 열 이름이 'price'라고 가정\u001b[39;00m\n\u001b[1;32m     16\u001b[0m \u001b[38;5;66;03m# 3. 학습/테스트 데이터 분리\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:4108\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_iterator(key):\n\u001b[1;32m   4107\u001b[0m         key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n\u001b[0;32m-> 4108\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_indexer_strict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcolumns\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m   4110\u001b[0m \u001b[38;5;66;03m# take() does not accept boolean indexers\u001b[39;00m\n\u001b[1;32m   4111\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(indexer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mbool\u001b[39m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6200\u001b[0m, in \u001b[0;36mIndex._get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6197\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   6198\u001b[0m     keyarr, indexer, new_indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reindex_non_unique(keyarr)\n\u001b[0;32m-> 6200\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_raise_if_missing\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkeyarr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis_name\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6202\u001b[0m keyarr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtake(indexer)\n\u001b[1;32m   6203\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, Index):\n\u001b[1;32m   6204\u001b[0m     \u001b[38;5;66;03m# GH 42790 - Preserve name from an Index\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6252\u001b[0m, in \u001b[0;36mIndex._raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6249\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone of [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkey\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m] are in the [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00maxis_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6251\u001b[0m not_found \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(ensure_index(key)[missing_mask\u001b[38;5;241m.\u001b[39mnonzero()[\u001b[38;5;241m0\u001b[39m]]\u001b[38;5;241m.\u001b[39munique())\n\u001b[0;32m-> 6252\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnot_found\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","\u001b[0;31mKeyError\u001b[0m: \"['토지 면적(㎡)'] not in index\""],"ename":"KeyError","evalue":"\"['토지 면적(㎡)'] not in index\"","output_type":"error"}],"execution_count":10},{"cell_type":"code","source":"# 필요한 라이브러리 임포트\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# 1. 데이터 불러오기\ndata = pd.read_csv('/kaggle/input/seoul-department-data/.csv', encoding='cp949')\n\n# 2. 특성과 타깃 변수 분리\n# CSV 파일의 열 이름이 정확히 \"건물 면적(㎡)\", \"토지 면적(㎡)\", \"건축년도\"로 되어 있는지 확인 후 적용\nX = data[['건물 면적(㎡)', '토지 면적(㎡)', '건축년도']]\ny = data['price']  # 집값에 해당하는 열 이름이 'price'라고 가정\n\n# 3. 학습/테스트 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# 4. 모델 선택 및 학습 (선형 회귀)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# 5. 사용자 입력으로 예측하기\n# 사용자에게 입력을 요청\ninput_building_area = float(input(\"건물 면적(㎡): \"))\ninput_land_area = float(input(\"토지 면적(㎡): \"))\ninput_year_built = int(input(\"건축년도: \"))\n\n# 입력값으로 예측\nuser_input = np.array([[input_building_area, input_land_area, input_year_built]])\npredicted_price = model.predict(user_input)\n\nprint(f\"예측된 집값: ${predicted_price[0]:,.2f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T02:17:15.808229Z","iopub.execute_input":"2024-11-06T02:17:15.808646Z","iopub.status.idle":"2024-11-06T02:17:20.062239Z","shell.execute_reply.started":"2024-11-06T02:17:15.808583Z","shell.execute_reply":"2024-11-06T02:17:20.060664Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/2246460194.py:9: DtypeWarning: Columns (0,7,8,19,20) have mixed types. Specify dtype option on import or set low_memory=False.\n  data = pd.read_csv('/kaggle/input/seoul-department-data/.csv', encoding='cp949')\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[11], line 13\u001b[0m\n\u001b[1;32m      9\u001b[0m data \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/input/seoul-department-data/.csv\u001b[39m\u001b[38;5;124m'\u001b[39m, encoding\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcp949\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m# 2. 특성과 타깃 변수 분리\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;66;03m# CSV 파일의 열 이름이 정확히 \"건물 면적(㎡)\", \"토지 면적(㎡)\", \"건축년도\"로 되어 있는지 확인 후 적용\u001b[39;00m\n\u001b[0;32m---> 13\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[43mdata\u001b[49m\u001b[43m[\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m건물 면적(㎡)\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m토지 면적(㎡)\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m건축년도\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m     14\u001b[0m y \u001b[38;5;241m=\u001b[39m data[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mprice\u001b[39m\u001b[38;5;124m'\u001b[39m]  \u001b[38;5;66;03m# 집값에 해당하는 열 이름이 'price'라고 가정\u001b[39;00m\n\u001b[1;32m     16\u001b[0m \u001b[38;5;66;03m# 3. 학습/테스트 데이터 분리\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:4108\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_iterator(key):\n\u001b[1;32m   4107\u001b[0m         key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n\u001b[0;32m-> 4108\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_indexer_strict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcolumns\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m   4110\u001b[0m \u001b[38;5;66;03m# take() does not accept boolean indexers\u001b[39;00m\n\u001b[1;32m   4111\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(indexer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mbool\u001b[39m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6200\u001b[0m, in \u001b[0;36mIndex._get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6197\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   6198\u001b[0m     keyarr, indexer, new_indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reindex_non_unique(keyarr)\n\u001b[0;32m-> 6200\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_raise_if_missing\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkeyarr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis_name\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6202\u001b[0m keyarr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtake(indexer)\n\u001b[1;32m   6203\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, Index):\n\u001b[1;32m   6204\u001b[0m     \u001b[38;5;66;03m# GH 42790 - Preserve name from an Index\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6252\u001b[0m, in \u001b[0;36mIndex._raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6249\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone of [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkey\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m] are in the [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00maxis_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6251\u001b[0m not_found \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(ensure_index(key)[missing_mask\u001b[38;5;241m.\u001b[39mnonzero()[\u001b[38;5;241m0\u001b[39m]]\u001b[38;5;241m.\u001b[39munique())\n\u001b[0;32m-> 6252\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnot_found\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","\u001b[0;31mKeyError\u001b[0m: \"['건물 면적(㎡)', '토지 면적(㎡)'] not in index\""],"ename":"KeyError","evalue":"\"['건물 면적(㎡)', '토지 면적(㎡)'] not in index\"","output_type":"error"}],"execution_count":11},{"cell_type":"code","source":"# 필요한 라이브러리 임포트\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# 1. 데이터 불러오기\ndata = pd.read_csv('/kaggle/input/seoul-department-data/.csv', encoding='cp949')\n\n# 2. 특성과 타깃 변수 분리\n# 필요한 열 이름을 정확히 반영 (\"건물면적(㎡)\", \"토지면적(㎡)\", \"건축년도\", \"물건금액(만원)\")\nX = data[['건물면적(㎡)', '토지면적(㎡)', '건축년도']]\ny = data['물건금액(만원)']  # 예측하고자 하는 타깃 변수\n\n# 3. 학습/테스트 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# 4. 모델 선택 및 학습 (선형 회귀)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# 5. 사용자 입력으로 예측하기\n# 사용자에게 입력을 요청\ninput_building_area = float(input(\"건물면적(㎡): \"))\ninput_land_area = float(input(\"토지면적(㎡): \"))\ninput_year_built = int(input(\"건축년도: \"))\n\n# 입력값으로 예측\nuser_input = np.array([[input_building_area, input_land_area, input_year_built]])\npredicted_price = model.predict(user_input)\n\nprint(f\"예측된 물건 금액(만원): {predicted_price[0]:,.2f}만원\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T02:30:14.015349Z","iopub.execute_input":"2024-11-06T02:30:14.015929Z","iopub.status.idle":"2024-11-06T02:30:18.588153Z","shell.execute_reply.started":"2024-11-06T02:30:14.015869Z","shell.execute_reply":"2024-11-06T02:30:18.586626Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/1954799468.py:9: DtypeWarning: Columns (0,7,8,19,20) have mixed types. Specify dtype option on import or set low_memory=False.\n  data = pd.read_csv('/kaggle/input/seoul-department-data/.csv', encoding='cp949')\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[12], line 21\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[38;5;66;03m# 4. 모델 선택 및 학습 (선형 회귀)\u001b[39;00m\n\u001b[1;32m     20\u001b[0m model \u001b[38;5;241m=\u001b[39m LinearRegression()\n\u001b[0;32m---> 21\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     23\u001b[0m \u001b[38;5;66;03m# 5. 사용자 입력으로 예측하기\u001b[39;00m\n\u001b[1;32m     24\u001b[0m \u001b[38;5;66;03m# 사용자에게 입력을 요청\u001b[39;00m\n\u001b[1;32m     25\u001b[0m input_building_area \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mfloat\u001b[39m(\u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m건물면적(㎡): \u001b[39m\u001b[38;5;124m\"\u001b[39m))\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_base.py:648\u001b[0m, in \u001b[0;36mLinearRegression.fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    644\u001b[0m n_jobs_ \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_jobs\n\u001b[1;32m    646\u001b[0m accept_sparse \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpositive \u001b[38;5;28;01melse\u001b[39;00m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcsr\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcsc\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcoo\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[0;32m--> 648\u001b[0m X, y \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_data\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    649\u001b[0m \u001b[43m    \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maccept_sparse\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_numeric\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmulti_output\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\n\u001b[1;32m    650\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    652\u001b[0m sample_weight \u001b[38;5;241m=\u001b[39m _check_sample_weight(\n\u001b[1;32m    653\u001b[0m     sample_weight, X, dtype\u001b[38;5;241m=\u001b[39mX\u001b[38;5;241m.\u001b[39mdtype, only_non_negative\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m    654\u001b[0m )\n\u001b[1;32m    656\u001b[0m X, y, X_offset, y_offset, X_scale \u001b[38;5;241m=\u001b[39m _preprocess_data(\n\u001b[1;32m    657\u001b[0m     X,\n\u001b[1;32m    658\u001b[0m     y,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    661\u001b[0m     sample_weight\u001b[38;5;241m=\u001b[39msample_weight,\n\u001b[1;32m    662\u001b[0m )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/base.py:584\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    582\u001b[0m         y \u001b[38;5;241m=\u001b[39m check_array(y, input_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124my\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mcheck_y_params)\n\u001b[1;32m    583\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 584\u001b[0m         X, y \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_X_y\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mcheck_params\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    585\u001b[0m     out \u001b[38;5;241m=\u001b[39m X, y\n\u001b[1;32m    587\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m check_params\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mensure_2d\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py:1106\u001b[0m, in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1101\u001b[0m         estimator_name \u001b[38;5;241m=\u001b[39m _check_estimator_name(estimator)\n\u001b[1;32m   1102\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   1103\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mestimator_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m requires y to be passed, but the target y is None\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1104\u001b[0m     )\n\u001b[0;32m-> 1106\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_array\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1108\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maccept_sparse\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1109\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccept_large_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maccept_large_sparse\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1110\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1111\u001b[0m \u001b[43m    \u001b[49m\u001b[43morder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43morder\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1112\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1113\u001b[0m \u001b[43m    \u001b[49m\u001b[43mforce_all_finite\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mforce_all_finite\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1114\u001b[0m \u001b[43m    \u001b[49m\u001b[43mensure_2d\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mensure_2d\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1115\u001b[0m \u001b[43m    \u001b[49m\u001b[43mallow_nd\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mallow_nd\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1116\u001b[0m \u001b[43m    \u001b[49m\u001b[43mensure_min_samples\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mensure_min_samples\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1117\u001b[0m \u001b[43m    \u001b[49m\u001b[43mensure_min_features\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mensure_min_features\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1118\u001b[0m \u001b[43m    \u001b[49m\u001b[43mestimator\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mestimator\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1119\u001b[0m \u001b[43m    \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mX\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1120\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1122\u001b[0m y \u001b[38;5;241m=\u001b[39m _check_y(y, multi_output\u001b[38;5;241m=\u001b[39mmulti_output, y_numeric\u001b[38;5;241m=\u001b[39my_numeric, estimator\u001b[38;5;241m=\u001b[39mestimator)\n\u001b[1;32m   1124\u001b[0m check_consistent_length(X, y)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py:921\u001b[0m, in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    915\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    916\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFound array with dim \u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m. \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m expected <= 2.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    917\u001b[0m             \u001b[38;5;241m%\u001b[39m (array\u001b[38;5;241m.\u001b[39mndim, estimator_name)\n\u001b[1;32m    918\u001b[0m         )\n\u001b[1;32m    920\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m force_all_finite:\n\u001b[0;32m--> 921\u001b[0m         \u001b[43m_assert_all_finite\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    922\u001b[0m \u001b[43m            \u001b[49m\u001b[43marray\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    923\u001b[0m \u001b[43m            \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minput_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    924\u001b[0m \u001b[43m            \u001b[49m\u001b[43mestimator_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mestimator_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    925\u001b[0m \u001b[43m            \u001b[49m\u001b[43mallow_nan\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mforce_all_finite\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m==\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mallow-nan\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    926\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    928\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ensure_min_samples \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    929\u001b[0m     n_samples \u001b[38;5;241m=\u001b[39m _num_samples(array)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py:161\u001b[0m, in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[1;32m    144\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m estimator_name \u001b[38;5;129;01mand\u001b[39;00m input_name \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m has_nan_error:\n\u001b[1;32m    145\u001b[0m     \u001b[38;5;66;03m# Improve the error message on how to handle missing values in\u001b[39;00m\n\u001b[1;32m    146\u001b[0m     \u001b[38;5;66;03m# scikit-learn.\u001b[39;00m\n\u001b[1;32m    147\u001b[0m     msg_err \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    148\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mestimator_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m does not accept missing values\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    149\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m encoded as NaN natively. For supervised learning, you might want\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    159\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m#estimators-that-handle-nan-values\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    160\u001b[0m     )\n\u001b[0;32m--> 161\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg_err)\n","\u001b[0;31mValueError\u001b[0m: Input X contains NaN.\nLinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values"],"ename":"ValueError","evalue":"Input X contains NaN.\nLinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values","output_type":"error"}],"execution_count":12},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}